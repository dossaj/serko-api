// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Serko.Expense.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ReservationFeature : Xunit.IClassFixture<ReservationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Reservation.feature"
#line hidden
        
        public ReservationFeature(ReservationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Reservation", "\tIn order to make reservations\r\n\tAs a connecting client\r\n\tI want to be able to ma" +
                    "nage reservations", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have an api client for \'https://localhost:5001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("I have an valid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value"});
            table3.AddRow(new string[] {
                        "vendor",
                        "vendor"});
            table3.AddRow(new string[] {
                        "date",
                        "2019-01-01"});
            table3.AddRow(new string[] {
                        "description",
                        "description"});
#line 9
 testRunner.And("I have an the following reservation:", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value"});
            table4.AddRow(new string[] {
                        "cost_centre",
                        "cost"});
            table4.AddRow(new string[] {
                        "payment_method",
                        "card"});
            table4.AddRow(new string[] {
                        "total",
                        "100.10"});
#line 14
 testRunner.And("I have an the following expense:", ((string)(null)), table4, "And ");
#line 19
 testRunner.And("I post the resource at \'/api/v1/reservation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Get all reserations")]
        [Xunit.TraitAttribute("FeatureTitle", "Reservation")]
        [Xunit.TraitAttribute("Description", "Get all reserations")]
        [Xunit.TraitAttribute("Category", "Reservation")]
        public virtual void GetAllReserations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all reserations", null, new string[] {
                        "Reservation"});
#line 22
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 23
 testRunner.Given("I have an api client for \'https://localhost:5001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.And("I have an valid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.When("I get the resource at \'/api/v1/reservation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("the result status code should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
 testRunner.And("the number of results should not be \'0\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get single reseration")]
        [Xunit.TraitAttribute("FeatureTitle", "Reservation")]
        [Xunit.TraitAttribute("Description", "Get single reseration")]
        public virtual void GetSingleReseration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get single reseration", null, ((string[])(null)));
#line 29
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 30
 testRunner.Given("I have an api client for \'https://localhost:5001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.And("I have an valid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.When("I get the resource at \'/api/v1/reservation/1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("the result status code should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.And("the result should have the id \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Post a reservation with an empty cost centre")]
        [Xunit.TraitAttribute("FeatureTitle", "Reservation")]
        [Xunit.TraitAttribute("Description", "Post a reservation with an empty cost centre")]
        public virtual void PostAReservationWithAnEmptyCostCentre()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a reservation with an empty cost centre", null, ((string[])(null)));
#line 36
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 37
 testRunner.Given("I have an api client for \'https://localhost:5001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.And("I have an valid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value"});
            table5.AddRow(new string[] {
                        "vendor",
                        "vendor"});
            table5.AddRow(new string[] {
                        "date",
                        "2019-01-01"});
            table5.AddRow(new string[] {
                        "description",
                        "description"});
#line 39
 testRunner.And("I have an the following reservation:", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value"});
            table6.AddRow(new string[] {
                        "payment_method",
                        "card"});
            table6.AddRow(new string[] {
                        "total",
                        "100.10"});
#line 44
 testRunner.And("I have an the following expense:", ((string)(null)), table6, "And ");
#line 48
 testRunner.And("I post the resource at \'/api/v1/reservation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.And("I get the resource from the post at \'/api/v1/reservation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.Then("the result status code should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 51
 testRunner.And("The result cost centre should be unknown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Post a reservation with a zero total")]
        [Xunit.TraitAttribute("FeatureTitle", "Reservation")]
        [Xunit.TraitAttribute("Description", "Post a reservation with a zero total")]
        public virtual void PostAReservationWithAZeroTotal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a reservation with a zero total", null, ((string[])(null)));
#line 53
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 54
 testRunner.Given("I have an api client for \'https://localhost:5001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.And("I have an valid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value"});
            table7.AddRow(new string[] {
                        "vendor",
                        "vendor"});
            table7.AddRow(new string[] {
                        "date",
                        "2019-01-01"});
            table7.AddRow(new string[] {
                        "description",
                        "description"});
#line 56
 testRunner.And("I have an the following reservation:", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "key",
                        "value"});
            table8.AddRow(new string[] {
                        "total",
                        "0"});
#line 61
 testRunner.And("I have an the following expense:", ((string)(null)), table8, "And ");
#line 64
 testRunner.And("I post the resource at \'/api/v1/reservation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.Then("the result status code should be \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Post a reservation by email with valid format")]
        [Xunit.TraitAttribute("FeatureTitle", "Reservation")]
        [Xunit.TraitAttribute("Description", "Post a reservation by email with valid format")]
        public virtual void PostAReservationByEmailWithValidFormat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a reservation by email with valid format", null, ((string[])(null)));
#line 67
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 68
 testRunner.Given("I have an api client for \'https://localhost:5001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
 testRunner.And("I have an valid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
 testRunner.When("I post the email \'EmailValid\' to \'/api/v1/reservation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 71
 testRunner.Then("the result status code should be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Post a reservation by email with missing closing tag")]
        [Xunit.TraitAttribute("FeatureTitle", "Reservation")]
        [Xunit.TraitAttribute("Description", "Post a reservation by email with missing closing tag")]
        public virtual void PostAReservationByEmailWithMissingClosingTag()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post a reservation by email with missing closing tag", null, ((string[])(null)));
#line 73
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line 74
 testRunner.Given("I have an api client for \'https://localhost:5001\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 75
 testRunner.And("I have an valid token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 76
 testRunner.When("I post the email \'EmailInvalid\' to \'/api/v1/reservation\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.Then("the result status code should be \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ReservationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ReservationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
